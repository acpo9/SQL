-- In this SQL code I downloaded a Spotify data set from Kaggle and then created the table in SQLite:

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
);

--Uploaded the Kaggle data into this table
-- Viewing the imported table:
SELECT *
FROM BIT_DB.Spotifydata
LIMIT 20;


-- Creating a list of artists by the number of tracks they have on the list:

SELECT
    artist_name, count(*) AS number_tracks
FROM
    BIT_DB.Spotifydata
GROUP BY
    artist_name
ORDER BY
    number_tracks DESC;


--What artists have the most tracks on the list?
WITH track_count_table AS(
    SELECT
        artist_name, count(*) AS number_tracks
    FROM 
        Spotifydata AS s
    GROUP BY artist_name)
    
SELECT
    artist_name, number_tracks
FROM
    track_count_table
WHERE
    number_tracks = (
    SELECT MAX(number_tracks)
    FROM track_count_table);
    

-- Looking for the most energetic songs, making a list in descending order that only includes songs that are at or above the average energy level
SELECT
    artist_name, track_name, energy
FROM
    BIT_DB.Spotifydata
WHERE energy >= (
    SELECT AVG(energy)
    FROM BIT_DB.Spotifydata)
ORDER BY
    energy DESC;
    
-- What is the longest song on the list?
SELECT
    artist_name, track_name
FROM
    BIT_DB.Spotifydata
WHERE duration_ms = (
    SELECT MAX(duration_ms)
    FROM BIT_DB.Spotifydata);
    
-- Creating a metric to calculate the best songs to play at a party, which is multiply popularity with danceability and energy
SELECT 
    artist_name, track_name, popularity*danceability*energy AS party_score
FROM
    BIT_DB.Spotifydata
ORDER BY
    party_score DESC;
    
-- Utilizing same made up metric in the last query, using a subquery to output the best party song on the list
SELECT artist_name, track_name
FROM BIT_DB.Spotifydata
WHERE (popularity*danceability*energy) =
    (SELECT MAX(popularity*danceability*energy)
    FROM BIT_DB.Spotifydata);


-- Calculating average danceability and energy of all songs on list    
SELECT 
    AVG(danceability) AS average_danceability, AVG(energy) AS average_energy
FROM
    BIT_DB.Spotifydata;


-- Calculating average danceability and energy of the top 10 most popular songs
SELECT 
    AVG(danceability) AS average_danceability, AVG(energy) AS average_energy
FROM
    BIT_DB.Spotifydata
WHERE popularity IN (
    SELECT popularity
    FROM BIT_DB.Spotifydata
    ORDER BY popularity
    LIMIT 10);
/*This is interesting, the average danceability of the top 10 most popular songs is significantly higher than the average overall, however the average energy of the 10
most popular songs is actually lower than the overall average */

